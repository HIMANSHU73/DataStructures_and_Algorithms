class Solution {
public:

vector<vector<string>> ans ;

bool isSafe(int row,int column, vector<string> board,int n){
int current_row = row ;
int current_column = column ;

//upper-diagonal
while(current_row >= 0 && current_column >= 0){
    if(board[current_row][current_column] == 'Q') return false ;
    current_row--;
    current_column-- ;
}

 current_row = row ;
 current_column = column ;
//lower-diagonal
while(current_row < n && current_column >= 0){
    if(board[current_row][current_column] == 'Q') return false ;
    current_row++ ;
    current_column-- ;
}
current_row = row ;
current_column = column ;
//left-row
while(current_column >= 0){
    if(board[current_row][current_column] == 'Q') return false ;
    current_column-- ;
}

return true ;
}

//ans -> vector of vector of string
//board -> vector of string...
void Solve(int column, vector<string>& board,int n){
    if(column == n){
        ans.push_back(board) ;
        return ;
    }

        for(int row  = 0 ; row < n ; row++){
            if(isSafe(row,column,board,n) == true){
                board[row][column] = 'Q' ;
                Solve(column+1, board, n) ;
                board[row][column] = '.' ;
            }
        }
    }

    vector<vector<string>> solveNQueens(int n) {
        vector<string> board(n) ;
        string s(n,'.') ;
        for(int i = 0 ; i < n ; i++){
            board[i] = s; 
        }

         Solve(0, board, n) ;

         return ans ;
    }
};
